# -*- coding: utf-8 -*-
"""
Created on Mon Dec 10 21:06:25 2012

@author: <epsilonyuan+mb@gmail.com>
"""
import sympy as sym
from math import exp,log
import datetime

B_SHRINK=0.98

def get_symbols_defs():
    (x,y,x1,x2,a1,a2,b,m,f1,f2)=sym.symbols('x,y,x1,x2,a1,a2,b,m,f1,f2')
    op_v=(f1+f2+(f1**2+f2**2)**0.5)*(f1**2+f2**2)**(m/2)
    op_w=(f1+f2-(f1**2+f2**2)**0.5)*(f1**2+f2**2)**(m/2)    
    a_e,b_e,x_e,y_e=sym.symbols('a_e,b_e,x_e,y_e')
    dd=(x-x_e)**2/a_e**2+(y-y_e)**2/b_e**2
    ell=2*sym.exp(-log(2)*dd)-1
    f=sym.symbols('f')
    y1=a1*f**2+b*f
    y2=a2*f**2+b*f    
    a1=(-1-b*x1)/x1**2
    a2=(1-b*x2)/x2**2
    b=2/((2+2**0.5)*2**(m/2))*B_SHRINK
    res=(op_v,op_w,ell,y1,y2,b,a1,a2)
    names='op_v,op_w,ell,y1,y2,b,a1,a2'.split(',')
    print "Common formulas:"    
    for i in xrange(len(res)):
        print names[i]+' =',res[i]
    return res
    
def get_ell_pars():
    return ({'x_e':-3,'y_e':1.1,'a_e':11,'b_e':6},{'x_e':0.1,'y_e':-0.2,'a_e':3.3,'b_e':4})

def get_test_points():
    return [(-2,2),(-3,1.1),(0.1,-0.2),(-14,1.1),(0.2,-3.8)]

class Record(object):
    def __init__(self,m,isUnion,xy,vals,normed_vals):
        self.m=m
        self.isUnion=isUnion
        self.xy=xy
        self.vals=vals
        self.normed_vals=normed_vals

def print_java_test_codes(records):
    ms=[]
    is_unions=[]
    exp_vals=[]
    exp_normed_vals=[]
    xys=[]
    for record in records:
        ms.append(record.m)
        is_unions.append(record.isUnion)
        exp_vals.append(record.vals)
        exp_normed_vals.append(record.normed_vals)
        xys.append(record.xy)
    
    java_code= '// This piece of Java code is generated by '+__file__+':\n'
    java_code+= '// B_SHRINK='+str(B_SHRINK)+', maybe you should check this constant in NormUnionIntersection.java\n'
    java_code+= '//' + str(datetime.datetime.now())+'\n'
    java_code+='int[] ms = new int[]{'
    for m in ms:
        java_code+=str(m)+', '
    java_code=java_code.rstrip(', ')
    java_code+='};\n\n'

    java_code+='boolean[] isUnions=new boolean[]{'
    for isu in is_unions:
        java_code+=('true' if isu else 'false')+', '
    java_code=java_code.rstrip(', ')+'};\n\n'
    
    java_code+='double[][] xys=new double[][] {'
    for (x,y) in xys:
        java_code+='{{{}, {}}}, '.format(x,y)
    java_code=java_code.rstrip(', ')
    java_code+='};\n\n'
    
    heads=('exp_vals','exp_normed_vals')
    heads_vals=(exp_vals,exp_normed_vals);
    for i in xrange(2):
        java_code+='double[][] '+heads[i]+' = new double[][]{'
        for val in heads_vals[i]:
            java_code+='{{{0[0]}, {0[1]}, {0[2]}}}, '.format(val)
        java_code=java_code.rstrip(', ')+'};\n\n'
    ell_pars=get_ell_pars()
    for i in xrange(len(ell_pars)):
        java_code+='EllipseLSF ell{}=new EllipseLSF({},{},{},{});\n'.format(i+1,ell_pars[i]['x_e'],ell_pars[i]['y_e'],ell_pars[i]['a_e'],ell_pars[i]['b_e'])
    java_code+="//end of generated codes!\n"
    print java_code


if __name__=='__main__':
    (op_v,op_w,ell,y1,y2,b,a1,a2)=get_symbols_defs()
    ell_1=ell.subs(get_ell_pars()[0])
    ell_2=ell.subs(get_ell_pars()[1])
    print 'ell_1 =',ell_1
    print 'ell_2 =',ell_2
    
    records=[]
    for m in xrange(3):
        print ''
        print 'm =',m
        sbs={'f1':ell_1,'f2':ell_2,'m':m}
        for (x,y) in get_test_points():
            ops=(op_v,op_w)
            ops_nms=('op_v','op_w')
            sbs_xy={'x':x,'y':y}
            for i in xrange(2):
                op=ops[i]
                op_val=op.subs(sbs).subs(sbs_xy).evalf()
                op_x_val=op.subs(sbs).diff('x').subs(sbs_xy).evalf()
                op_y_val=op.subs(sbs).diff('y').subs(sbs_xy).evalf()
                op_nm=ops_nms[i]
                
                print op_nm+' =',op_val
                print op_nm+'_x =',op_x_val
                print op_nm+'_y =',op_y_val
                print ''
                
                x1=op.subs([('f1',-1),('f2',-1),('m',m)]).evalf()
                x2=op.subs([('f1',1),('f2',1),('m',m)]).evalf()
                y_t=y1 if op_val<=0 else y2
                y_t=y_t.subs([('a1',a1),('a2',a2),('b',b),('f',op),('m',m),('x1',x1),('x2',x2)])                
                y_val=y_t.subs(sbs).subs(sbs_xy).evalf()
                print 'y_'+op_nm+ ' =',y_val
                y_val_x=y_t.subs(sbs).diff('x').subs(sbs_xy).evalf()
                y_val_y=y_t.subs(sbs).diff('y').subs(sbs_xy).evalf()
                print 'y_'+op_nm+'_x =',y_val_x
                print 'y_'+op_nm+'_y =',y_val_y
                print ''
                records.append(Record(m,i==0,(x,y),(op_val,op_x_val,op_y_val),(y_val,y_val_x,y_val_y)))
    
    print ''
    print_java_test_codes(records)